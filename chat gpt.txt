Front-end (React):
Create a new React application using Create React App:
bash
Copy code
npx create-react-app push-notification-app
cd push-notification-app
Replace the contents of src/App.js with the following code:
jsx
Copy code
import React from "react";

const PushNotificationButton = () => {
  const sendNotification = () => {
    const deviceRegistrationToken = "DEVICE_REGISTRATION_TOKEN"; // Replace with the actual token

    fetch("/send-notification", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ deviceRegistrationToken }),
    })
      .then((response) => response.json())
      .then((data) => {
        if (data.success) {
          console.log("Notification sent successfully.");
        } else {
          console.error("Failed to send notification.");
        }
      })
      .catch((error) => {
        console.error("Error sending notification:", error);
      });
  };

  return (
    <div>
      <button onClick={sendNotification}>Send Notification</button>
    </div>
  );
};

function App() {
  return (
    <div className="App">
      <h1>Push Notification Example</h1>
      <PushNotificationButton />
    </div>
  );
}

export default App;
Back-end (Express with Firebase Admin SDK):
Create a new folder for your server:
bash
Copy code
mkdir push-notification-server
cd push-notification-server
Initialize a new Node.js project and install required dependencies:
bash
Copy code
npm init -y
npm install express firebase-admin
Create a file named server.js in the push-notification-server folder and add the following code:
js
Copy code
const express = require("express");
const admin = require("firebase-admin");
const serviceAccount = require("path/to/serviceAccountKey.json"); // Replace with the path to your Service Account Key JSON file

// Initialize Firebase Admin SDK
admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
});

const app = express();
const PORT = 3001; // You can choose any available port

// API endpoint to send push notification
app.post("/send-notification", (req, res) => {
  const { deviceRegistrationToken } = req.body;

  const message = {
    notification: {
      title: "New Message",
      body: "You have a new message.",
    },
    token: deviceRegistrationToken,
  };

  admin.messaging().send(message)
    .then((response) => {
      console.log("Successfully sent notification:", response);
      res.json({ success: true });
    })
    .catch((error) => {
      console.error("Error sending notification:", error);
      res.status(500).json({ success: false, error: "Failed to send notification." });
    });
});

app.listen(PORT, () => {
  console.log(`Server started on port ${PORT}`);
});
Connect Front-end and Back-end:
In your React front-end, modify the deviceRegistrationToken variable in the PushNotificationButton component to contain the actual device registration token obtained from the client-side (e.g., using Firebase Messaging).

In your server-side code (server.js), replace "path/to/serviceAccountKey.json" with the actual path to your Service Account Key JSON file obtained from the Firebase Console.

Start Front-end and Back-end:
In one terminal, navigate to the push-notification-app directory and start the React development server:
bash
Copy code
npm start
In another terminal, navigate to the push-notification-server directory and start the Express server:
bash
Copy code
node server.js
Now you should have both your front-end (React) and back-end (Express with Firebase Admin SDK) running. The front-end displays a button, and when you click it, it sends a push notification request to the server. The server then uses the Firebase Admin SDK to send the push notification to the specified device.

Please keep in mind that this is a basic example, and in a real-world scenario, you would need to handle security, user authentication, error handling, and other important considerations.